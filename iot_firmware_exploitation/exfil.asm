# Create a TCP socket
li $a0, 2           ; AF_INET
li $a1, 2           ; SOCK_STREAM
li $a2, 0           ; Socket protocol
li $v0, 4183        ; sys_socket
syscall
move $s0, $v0       ; Save socket to $s0

# Set socket option so that the socket can be reused
addiu $sp, $sp, -4  ; Make space on the stack for socklen_t size
li $t0, 4
sw $t0, 0($sp)      ; sizeof(socklen_t)
move $a0, $s0       ; socket fd
li $a1, 65535       ; SOL_SOCKET
li $a2, 4           ; SO_REUSEADDR
move $a3, $sp       ; address of socklen_t
li $v0, 4181        ; sys_setsockopt
syscall

# Bind to port 0x8080 (32,896)
addiu $sp, $sp, -16 ; Make space on the stack for the sockaddr struct
sw $zero, 12($sp)   ; NULL
sw $zero, 8($sp)    ; NULL
sw $zero, 4($sp)    ; NULL
li $t1, 0x8080      ; port to bind to
sh $t1, 2($sp)
li $t1, 2           ; AF_INET 
sh $t1, 0($sp)
move $a0, $s0       ; socket fd
move $a1, $sp       ; sockaddr_in structure
li $a2, 16          ; sockaddr_in size
li $v0, 4169        ; sys_bind
syscall

# Listen
move $a0, $s0       ; socket fd
li $a1, 10          ; connection buffer size
li $v0, 4174        ; sys_listen
syscall

# Accept incoming connection
move $a0, $s0       ; socket fd
li $a1, 0
li $a2, 0
li $v0, 4168        ; sys_accept
syscall
move $s1, $v0       ; save client socket fd to $s1

addiu $sp, $sp, -4  ; Make space on the stack for reading data from stdin

# Read byte from stdin
li $a0, 0           ; fd = 0
move $a1, $sp       ; buf = $sp
li $a2, 1           ; count = 1
li $v0, 4003        ; sys_read
syscall

li $v1, 1
bne $v0, $v1, 36    ; If we didn't read 1 byte, goto end

# Write byte to stdout
move $a0, $s1       ; fd = client socket
move $a1, $sp       ; buf = $sp
li $a2, 1           ; count = 1
li $v0, 4004        ; sys_write
syscall

b -52               ; Branch back to read the next byte from stdin

# _exit(0)
li $a0, 0           ; exit code, 0
li $v0, 4001        ; sys_exit
syscall

